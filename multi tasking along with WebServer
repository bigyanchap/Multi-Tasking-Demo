//Multi-tasking Demo on nodeMCU 1.0 ESP 12E module [with WebServer]
//With this you can control your LED from web, by using buttons and simultaneously you can run a looping sub-routine.
//Composed by Bigyan Chapagain. October 13, 2017.
#include <ESP8266WiFi.h>
#include <Ticker.h>
const char* ssid = "my-ssid"; // SSID i.e. Service Set Identifier is the name of your WIFI
const char* password = "my-password"; // Your Wifi password, in case you have open network comment the whole statement.

const int outLed=3; // GPIO3 of NodeMCU
WiFiServer server(80); // Creates a server that listens for incoming connections on the specified port, here in this case port is 80.
Ticker ticker;
unsigned long counter=-1;
const int onPin=D6;
const int offPin=D2;

const int debounceInterval=200;
unsigned long prevMillis4Off=0;
unsigned long prevMillis4On=0;
//D2,D6 interrupt pins

void setup() {
  //pins D0, D1, D3, D4, D5 are connected to LEDs.
  //They form ring counter.
  pinMode(D0,OUTPUT);
  pinMode(D1,OUTPUT);
  pinMode(D3,OUTPUT);
  pinMode(D4,OUTPUT);
  pinMode(D5,OUTPUT);
  ticker.attach(1,isrRingCounter);//timer interrupt
  attachInterrupt(onPin, onIsr, FALLING);//hardware Interrupt
  attachInterrupt(offPin, offIsr, FALLING);//hardware Interrupt
  Serial.begin(115200);
  delay(10);

  pinMode(outLed,OUTPUT);//Rx pin, gpio3
  digitalWrite(outLed,LOW);
  // Connect to WiFi network
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  
  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.println(WiFi.localIP());
}
void loop() {
  // Check if a client has connected
  WiFiClient client = server.available();
  if (!client) {
    return;
  }

  // Wait until the client sends some data
  Serial.println("new client");
  while(!client.available()){
    delay(1);
  }

  // Read the first line of the request
  String request = client.readStringUntil('\r');
  Serial.println(request);
  client.flush();

  // Match the request

  int value = LOW;
  if (request.indexOf("/LED=ON") != -1)  {
    digitalWrite(outLed, HIGH);
    value = HIGH;
  }
  if (request.indexOf("/LED=OFF") != -1)  {
    digitalWrite(outLed, LOW);
    value = LOW;
  }

// Set ledPin according to the request
//digitalWrite(ledPin, value);

  // Return the response
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println(""); //  do not forget this one
  client.println("<!DOCTYPE HTML>");
  client.println("<html>");

  client.print("Led pin is now: ");

  if(value == HIGH) {
    client.print("On");
  } else {
    client.print("Off");
  }
  client.println("<br><br>");
  client.println("<a href=\"/LED=ON\"\"><button>Turn On </button></a>");
  client.println("<a href=\"/LED=OFF\"\"><button>Turn Off </button></a><br />");  
  client.println("</html>");

  delay(1);
  Serial.println("Client disconnected");
  Serial.println("");
}
void offIsr(){
  unsigned long Millis=millis();
  if(Millis-prevMillis4Off>debounceInterval){
    digitalWrite(outLed,LOW);
    
  }
  prevMillis4Off=Millis;
}
void onIsr(){
  unsigned long Millis=millis();
  if(Millis-prevMillis4On>debounceInterval){
    digitalWrite(outLed,HIGH);
    
  }
  prevMillis4On=Millis;
}
void isrRingCounter(){
  counter++;
  int mod=counter%5;
  switch(mod){
    case 1:
      digitalWrite(D0,HIGH);
      digitalWrite(D5,LOW);
      break;
    case 2:
      digitalWrite(D1,HIGH);
      digitalWrite(D0,LOW);
      break;
    case 3:
      digitalWrite(D3,HIGH);
      digitalWrite(D1,LOW);
      break;
    case 4:
      digitalWrite(D4,HIGH);
      digitalWrite(D3,LOW);
      break;
    default:
      digitalWrite(D5,HIGH);
      digitalWrite(D4,LOW);
      break;
  }
}
